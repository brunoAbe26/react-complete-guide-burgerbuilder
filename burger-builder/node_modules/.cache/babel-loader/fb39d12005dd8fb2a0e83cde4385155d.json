{"ast":null,"code":"import _objectSpread from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Udemy\\\\React - The complete Guide\\\\react-complete-guide-burgerbuilder\\\\burger-builder\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ContactData, _React$Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          }\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMothod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fatest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    _this.orderHandler = function (e) {\n      console.log(e);\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIndentifier in _this.state.orderForm) {\n        formData[formElementIndentifier] = _this.state.orderForm[formElementIndentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIndentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIndentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIndentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = false;\n\n      if (rules.required) {\n        isValid = value.trim() !== '';\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var order = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n      if (!this.state.loading) order = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"ORDER\"));\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), order);\n    }\n  }]);\n\n  return ContactData;\n}(React.Component);\n\nexport default ContactData;","map":{"version":3,"sources":["E:\\Udemy\\React - The complete Guide\\react-complete-guide-burgerbuilder\\burger-builder\\src\\containers\\Checkout\\ContactData\\ContactData.js"],"names":["React","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","street","valid","zipCode","country","email","deliveryMothod","options","displayValue","loading","orderHandler","e","console","log","preventDefault","setState","formData","formElementIndentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","event","inputIndentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","formElementsArray","key","id","config","map","formElement","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\n\r\nclass ContactData extends React.Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                }\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false\r\n            },\r\n            deliveryMothod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fatest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                ]\r\n                },\r\n                value: ''\r\n            }\r\n        },\r\n\r\n        loading: false\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = false;\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '';\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (e) => {\r\n        console.log(e);\r\n        e.preventDefault();\r\n        this.setState({loading: true});\r\n        const formData = {};\r\n        for (let formElementIndentifier in this.state.orderForm) {\r\n            formData[formElementIndentifier] = this.state.orderForm[formElementIndentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            orderData: formData\r\n        }\r\n        axios.post('/orders.json', order)\r\n            .then(response => {\r\n                this.setState({loading: false});\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                this.setState({loading: false});\r\n            });\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIndentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        }\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIndentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedOrderForm[inputIndentifier] = updatedFormElement;\r\n        console.log(updatedFormElement);\r\n        this.setState({orderForm: updatedOrderForm});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let order = <Spinner />\r\n        if (!this.state.loading)\r\n            order = (\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formElementsArray.map(formElement => (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                    ))}\r\n                    <Button btnType=\"Success\">ORDER</Button>\r\n                </form>\r\n            );\r\n        return(\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {order}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}